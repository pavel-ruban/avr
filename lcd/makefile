#############################################################
#######  MMC Atemga48pa make scripts by Pavel Ruban  ########
#############################################################

include makefile.conf

SRC =	main.c \
	spi.c \
	lcd.c \
	avr.s
	#sd.c \
	#fatfs/ff.c \
	fatfs/diskio.c
	#screen.c

CFILES = $(filter %.c, $(SRC))
SFILES = $(filter %.s, $(SRC))

COBJ = $(CFILES:.c=.o)
SOBJ = $(SFILES:.s=.o)
GDB_COBJ = $(CFILES:.c=_debug.o)
GDB_SOBJ = $(SFILES:.s=_debug.o)
COBJD = $(COBJ:.o=.d)

all: $(TARGET_BINARY)

# Run avr emulator with gdb server on 1234 port
sim: $(GDB_TARGET_BINARY) $(GDB_TARGET_HEX)
	$(SIM) -m $(MMCU) -v -f $(F_CPU) -g $(GDB_TARGET_HEX)

# Connect gdb to simulator for runtime debuggin
gdb: $(GDB_TARGET_BINARY)
	$(GDB) --ex='layout regs' --ex='target remote terminal:1234' -ex='focus CMD' --ex='symbol-file $(GDB_TARGET_BINARY)'

$(GDB_TARGET_HEX): $(GDB_TARGET_BINARY)
	$(OBJCOPY) -j .text -O ihex $(GDB_TARGET_BINARY) $(GDB_TARGET_HEX)

hex: $(TARGET_BINARY)
	$(OBJCOPY) -j .text -O ihex $(TARGET_BINARY) $(TARGET_HEX)

# Make c dependencies.
$(COBJD): %.d: %.c
	$(GCC) -mmcu=$(MMCU) -MM $< > $@

# Include autogenerated dependencies.
-include $(COBJD)

$(COBJ): %.o: %.c
	$(GCC) -mmcu=$(MMCU) $(CFLAGS) $(CINCLUDES) -DF_CPU=$(F_CPU)UL $< -c -o $@

$(SOBJ): %.o: %.s
	$(GCC) -mmcu=$(MMCU) $(SINCLUDES) -x assembler-with-cpp $< -E -DF_CPU=$(F_CPU) | $(AS) -m $(MMCU) $(SFLAGS) $(SINCLUDES) - -c -o $@

$(GDB_COBJ): %_debug.o: %.c
	$(GCC) -g -mmcu=$(MMCU) $(CFLAGS) -DF_CPU=$(F_CPU)UL $(CINCLUDES) $< -c -o $@

$(GDB_SOBJ): %_debug.o: %.s
	$(GCC) -mmcu=$(MMCU) $(SINCLUDES) -x assembler-with-cpp $< -E -DF_CPU=$(F_CPU) | $(AS) -g -m $(MMCU) $(SFLAGS) $(SINCLUDES) - -c -o $@

# Translate & link binary file
$(TARGET_BINARY): $(COBJD) $(COBJ) $(SOBJ)
	#$(LD) $(SOBJ) $(COBJ) -T ld.cls -o $(TARGET_BINARY) $(LINKFLAGS)
	$(LD) $(SOBJ) $(COBJ) -T ld2.cls $(LINKFLAGS) -o $(TARGET_BINARY)

$(GDB_TARGET_BINARY): $(COBJD) $(GDB_COBJ) $(GDB_SOBJ)
	$(LD) -g $(GDB_SOBJ) $(GDB_COBJ) -T ld.cls -o $(GDB_TARGET_BINARY) $(LINKFLAGS)

flash: $(TARGET_BINARY)
	avrdude -Pusb -cusbasp -p$(FMMCU) -U flash:w:$(TARGET_BINARY) -u

.PHONY:	clean

clean:
	-rm $(SOBJ) $(COBJ) $(COBJD) $(TARGET_BINARY) $(GDB_TARGET_BINARY)
